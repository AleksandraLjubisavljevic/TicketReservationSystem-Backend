// <auto-generated />
using System;
using FpisNovoAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FpisNovoAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230822173726_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Fpis_novo.Models.AvailableSeats", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("ZoneId", "ConcertId");

                    b.HasIndex("ConcertId");

                    b.ToTable("AvailableSeats");
                });

            modelBuilder.Entity("Fpis_novo.Models.Concert", b =>
                {
                    b.Property<int>("ConcertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("ConcertId");

                    b.ToTable("Concerts");
                });

            modelBuilder.Entity("Fpis_novo.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Address2")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Company")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailConfirmation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Fpis_novo.Models.Promocode", b =>
                {
                    b.Property<int>("PromocodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int?>("UsedReservationId")
                        .HasColumnType("int");

                    b.HasKey("PromocodeId");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.HasIndex("UsedReservationId")
                        .IsUnique();

                    b.ToTable("Promocodes");
                });

            modelBuilder.Entity("Fpis_novo.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PromocodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<int?>("UsedPromocodeId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("ConcertId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Fpis_novo.Models.ReservationTicket", b =>
                {
                    b.Property<int>("ReservationTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("ReservationTicketId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ReservationTickets");
                });

            modelBuilder.Entity("Fpis_novo.Models.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("ZoneId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Fpis_novo.Models.AvailableSeats", b =>
                {
                    b.HasOne("Fpis_novo.Models.Concert", "Concert")
                        .WithMany("AvailableSeats")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fpis_novo.Models.Zone", "Zone")
                        .WithMany("AvailableSeats")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Fpis_novo.Models.Promocode", b =>
                {
                    b.HasOne("Fpis_novo.Models.Reservation", "ReservationCreated")
                        .WithOne("Promocode")
                        .HasForeignKey("Fpis_novo.Models.Promocode", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fpis_novo.Models.Reservation", "ReservationUsed")
                        .WithOne("UsedPromocode")
                        .HasForeignKey("Fpis_novo.Models.Promocode", "UsedReservationId");

                    b.Navigation("ReservationCreated");

                    b.Navigation("ReservationUsed");
                });

            modelBuilder.Entity("Fpis_novo.Models.Reservation", b =>
                {
                    b.HasOne("Fpis_novo.Models.Concert", "Concert")
                        .WithMany("Reservations")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fpis_novo.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Fpis_novo.Models.ReservationTicket", b =>
                {
                    b.HasOne("Fpis_novo.Models.Reservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fpis_novo.Models.Zone", "ZoneData")
                        .WithMany("Tickets")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("ZoneData");
                });

            modelBuilder.Entity("Fpis_novo.Models.Concert", b =>
                {
                    b.Navigation("AvailableSeats");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Fpis_novo.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Fpis_novo.Models.Reservation", b =>
                {
                    b.Navigation("Promocode");

                    b.Navigation("Tickets");

                    b.Navigation("UsedPromocode");
                });

            modelBuilder.Entity("Fpis_novo.Models.Zone", b =>
                {
                    b.Navigation("AvailableSeats");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
